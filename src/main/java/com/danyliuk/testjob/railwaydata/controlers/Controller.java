package com.danyliuk.testjob.railwaydata.controlers;

import com.danyliuk.testjob.railwaydata.RailwaydataApplication;
import com.danyliuk.testjob.railwaydata.entitys.CarriageType;
import com.danyliuk.testjob.railwaydata.repository.CarriageRepository;
import com.danyliuk.testjob.railwaydata.repository.CarriageTypeRepository;
import com.danyliuk.testjob.railwaydata.repository.TrainRepository;
import com.danyliuk.testjob.railwaydata.entitys.Carriage;
import com.danyliuk.testjob.railwaydata.entitys.Train;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.StreamSupport;

import static com.danyliuk.testjob.railwaydata.constants.Constants.*;

@org.springframework.stereotype.Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class Controller {
    private static final Logger log = LoggerFactory.getLogger(RailwaydataApplication.class);

    @Autowired
    // This means to get the bean called userRepository Which is auto-generated by Spring, we will use it to handle the data
    private CarriageTypeRepository carriageTypeRepository;
    @Autowired
    private CarriageRepository carriageRepository;
    @Autowired
    private TrainRepository trainRepository;

    // Тестовый эндпоинт
    // curl http://localhost:8080/demo/test
    @GetMapping(path = "/test")
    public @ResponseBody String test() {
        return "Тестовый эндпоинт";
    }

    // Эндпоинт добавить общие вагоны
    // curl http://localhost:8080/demo/addShareCar -d numCar=3
    @PostMapping(path = "/addShareCar")
    public @ResponseBody String addShareCarriage(
            @RequestParam int numCar
    ) {
        addCar(TYPE_SHARED, numCar);
        return String.format("\nДобавлено %d общих вагонов\n", numCar);
    }

    // Эндпоинт добавить плацкартные вагоны
    // curl http://localhost:8080/demo/addEconomCar -d numCar=3
    @PostMapping(path = "/addEconomCar")
    public @ResponseBody String addEconomCarriage(
            @RequestParam int numCar
    ) {
        addCar(TYPE_ECONOM, numCar);
        return String.format("\nДобавлено %d плацкартных вагонов\n", numCar);
    }

    // Эндпоинт добавить купейные вагоны
    // curl http://localhost:8080/demo/addCompCar -d numCar=3
    @PostMapping(path = "/addCompCar")
    public @ResponseBody String addCompCarriage(
            @RequestParam int numCar
    ) {
        addCar(TYPE_COMP, numCar);
        return String.format("\nДобавлено %d купейных вагонов\n", numCar);
    }

    // Эндпоинт добавить СВ вагоны
    // curl http://localhost:8080/demo/addSuperCar -d numCar=3
    @PostMapping(path = "/addSuperCar")
    public @ResponseBody String addSuperCarriage(
            @RequestParam int numCar
    ) {
        addCar(TYPE_SUPER_COMP, numCar);
        return String.format("\nДобавлено %d СВ вагонов\n", numCar);
    }

    //создание и добавление вагонов
    private void addCar(String typeCar, int numCar) {
        CarriageType carriageType = carriageTypeRepository.findByNameCar(typeCar);
        ArrayList<Carriage> listCarriages = new ArrayList<>();
        for (int i = 0; i < numCar; i++) {
            Carriage carriage = new Carriage();
            carriage.setTypeCar(carriageType);
            listCarriages.add(carriage);
        }

        carriageRepository.saveAll(listCarriages);
    }

    // Эндпоинт создание поезда
    // curl http://localhost:8080/demo/createtrain -d shareCar=3 -d economCar=3 -d compartmentCar=3 -d superCompartmentCar=3 -d name=number1
    @PostMapping(path = "/createtrain") // Map ONLY POST Requests
    public @ResponseBody String createtrain(
            @RequestParam String name,
            @RequestParam int shareCar,
            @RequestParam int economCar,
            @RequestParam int compartmentCar,
            @RequestParam int superCompartmentCar
            ) {
        ArrayList<Carriage> listCar = new ArrayList<>();
        int createShare = 0;
        int createEconom = 0;
        int createComp = 0;
        int createSuper = 0;

        CarriageType carType = carriageTypeRepository.findByNameCar(TYPE_SHARED);
        Iterator<Carriage> carriages = carriageRepository.findByTypeCar(carType).iterator();
        while (carriages.hasNext()) {
            listCar.add(carriages.next());
            createShare++;
            if (createShare == shareCar) {
                break;
            }
        }

        carType = carriageTypeRepository.findByNameCar(TYPE_ECONOM);
        carriages = carriageRepository.findByTypeCar(carType).iterator();
        while (carriages.hasNext()) {
            listCar.add(carriages.next());
            createEconom++;
            if (createEconom == economCar) {
                break;
            }
        }

        carType = carriageTypeRepository.findByNameCar(TYPE_COMP);
        carriages = carriageRepository.findByTypeCar(carType).iterator();
        while (carriages.hasNext()) {
            listCar.add(carriages.next());
            createComp++;
            if (createComp == compartmentCar) {
                break;
            }
        }

        carType = carriageTypeRepository.findByNameCar(TYPE_SUPER_COMP);
        carriages = carriageRepository.findByTypeCar(carType).iterator();
        while (carriages.hasNext()) {
            listCar.add(carriages.next());
            createSuper++;
            if (createSuper == superCompartmentCar) {
                break;
            }
        }

        carriageRepository.deleteAll(listCar);

        //создание поезда
        if ((createShare | createEconom | createComp | createSuper) > 0) {
            Train train = new Train();
            train.setName(name);
            train.setListCarriages(listCar);
            trainRepository.save(train);



            return String.format("\n-------------------------------------------------------------------------\nСформирован поезд:%s",
                    createInfoTrain(name, createShare, createEconom, createComp, createSuper));
        } else {
            return "\nПоезд не сформирован. В базе отсутствуют вагоны.\n";
        }
    }

    // Эндпоинт получение информации о наличии свободных общих вагонов
    // curl http://localhost:8080/demo/infoShareCars
    @GetMapping(path = "/infoShareCars")
    public @ResponseBody String getNumShareCar() {
        Iterable<Carriage> carriages = carriageRepository.findByTypeCar(carriageTypeRepository.findByNameCar(TYPE_SHARED));
        long numCar = StreamSupport.stream(carriages.spliterator(), false).count();
        return String.format("\nДоступно %d общих вагонов\n", numCar);
    }

    // Эндпоинт получение информации о наличии свободных плацкартных вагонов
    // curl http://localhost:8080/demo/infoEconomCars
    @GetMapping(path = "/infoEconomCars")
    public @ResponseBody String getNumEconomCar() {
        Iterable<Carriage> carriages = carriageRepository.findByTypeCar(carriageTypeRepository.findByNameCar(TYPE_ECONOM));
        long numCar = StreamSupport.stream(carriages.spliterator(), false).count();
        return String.format("\nДоступно %d плацкартных вагонов\n", numCar);
    }

    // Эндпоинт получение информации о наличии свободных купейных вагонов
    // curl http://localhost:8080/demo/infoCompCars
    @GetMapping(path = "/infoCompCars")
    public @ResponseBody String getNumCompCar() {
        Iterable<Carriage> carriages = carriageRepository.findByTypeCar(carriageTypeRepository.findByNameCar(TYPE_COMP));
        long numCar = StreamSupport.stream(carriages.spliterator(), false).count();
        return String.format("\nДоступно %d купейных вагонов\n", numCar);
    }

    // Эндпоинт получение информации о наличии свободных СВ вагонов
    // curl http://localhost:8080/demo/infoSuperCars
    @GetMapping(path = "/infoSuperCars")
    public @ResponseBody String getNumSuperCar() {
        Iterable<Carriage> carriages = carriageRepository.findByTypeCar(carriageTypeRepository.findByNameCar(TYPE_SUPER_COMP));
        long numCar = StreamSupport.stream(carriages.spliterator(), false).count();
        return String.format("\nДоступно %d СВ вагонов\n", numCar);
    }

    // Эндпоинт получение информации о всех поездах
    // curl http://localhost:8080/demo/infotrains
    @GetMapping(path = "/infotrains")
    public @ResponseBody String getAllTrains() {
        Iterable<Train> trains = trainRepository.findAll();
        StringBuilder builder = new StringBuilder();
        StreamSupport.stream(trains.spliterator(), false).forEach(train -> {   //конвертация Iterable в Stream
            String name = train.getName();
            ArrayList<Carriage> listCar = train.getListCarriages();
            int share = (int) listCar.stream().filter(car ->car.getTypeCar().getNameCar().equals(TYPE_SHARED)).count();
            int econom = (int) listCar.stream().filter(car ->car.getTypeCar().getNameCar().equals(TYPE_ECONOM)).count();
            int comp = (int) listCar.stream().filter(car ->car.getTypeCar().getNameCar().equals(TYPE_COMP)).count();
            int sComp = (int) listCar.stream().filter(car ->car.getTypeCar().getNameCar().equals(TYPE_SUPER_COMP)).count();

            builder.append(createInfoTrain(name, share, econom, comp, sComp));
        });

        if (!builder.isEmpty()) {
            return builder.toString();
        } else {
            return "Поездов в базе нет";
        }
    }

    // Эндпоинт получение списка поездов
    // curl http://localhost:8080/demo/listtrains
    @GetMapping(path = "/listtrains")
    public @ResponseBody String getListTrains() {
        Iterable<Train> trains = trainRepository.findAll();
        StringBuilder builder = new StringBuilder();

        final AtomicInteger counter = new AtomicInteger(0);
        StreamSupport.stream(trains.spliterator(), false).forEach(train -> {   //конвертация Iterable в Stream
            counter.incrementAndGet();
            builder.append(String.format("%s. %s, ID = %d\n", counter.toString(), train.getName(), train.getId()));
        });

        if (!builder.isEmpty()) {
            return "\nСписок поездов:\n" + builder.toString();
        } else {
            return "\nПоездов в базе нет\n";
        }
    }

    // Эндпоинт получение информации по конкретному поезду по ID поезда (выводится в списке поездов)
    // curl http://localhost:8080/demo/infoabouttrain -d idCar=1
    @PostMapping(path = "/infoabouttrain")
    public @ResponseBody String getInfoTrain(@RequestParam int idCar) {
        Optional<Train> train = trainRepository.findById(idCar);
        if (train.isPresent()) {
            String name = train.get().getName();
            ArrayList<Carriage> listCar = train.get().getListCarriages();
            int share = (int) listCar.stream().filter(car ->car.getTypeCar().getNameCar().equals(TYPE_SHARED)).count();
            int econom = (int) listCar.stream().filter(car ->car.getTypeCar().getNameCar().equals(TYPE_ECONOM)).count();
            int comp = (int) listCar.stream().filter(car ->car.getTypeCar().getNameCar().equals(TYPE_COMP)).count();
            int sComp = (int) listCar.stream().filter(car ->car.getTypeCar().getNameCar().equals(TYPE_SUPER_COMP)).count();

            return createInfoTrain(name, share, econom, comp, sComp);
        }
        return "Такого поезда в базе нет\n";
    }



}

